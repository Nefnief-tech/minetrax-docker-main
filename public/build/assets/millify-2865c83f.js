var u={},l={};Object.defineProperty(l,"__esModule",{value:!0});l.defaultOptions=void 0;l.defaultOptions={decimalSeparator:".",lowercase:!1,precision:1,space:!1,units:["","K","M","B","T","P","E"]};var i={};Object.defineProperty(i,"__esModule",{value:!0});i.roundTo=i.parseValue=void 0;function y(e){const t=parseFloat(e==null?void 0:e.toString());if(isNaN(t))throw new Error("Input value is not a number");if(t>Number.MAX_SAFE_INTEGER||t<Number.MIN_SAFE_INTEGER)throw new RangeError("Input value is outside of safe integer range");return t}i.parseValue=y;function I(e,t){if(!Number.isFinite(e))throw new Error("Input value is not a finite number");if(!Number.isInteger(t)||t<0)throw new Error("Precision is not a positive integer");return Number.isInteger(e)?e:parseFloat(e.toFixed(t))}i.roundTo=I;Object.defineProperty(u,"__esModule",{value:!0});u.millify=void 0;const d=l,p=i,m=1e3;function*g(e){let t=m;for(;;){const o=e/t;if(o<1)return;yield o,t*=m}}function _(e,t){var o;const r=t?Object.assign(Object.assign({},d.defaultOptions),t):d.defaultOptions;if(!Array.isArray(r.units)||!r.units.length)throw new Error("Option `units` must be a non-empty array");let n;try{n=p.parseValue(e)}catch(s){return console.warn(`WARN: ${s.message} (millify)`),String(e)}const O=n<0?"-":"";n=Math.abs(n);let a=0;for(const s of g(n))n=s,a+=1;if(a>=r.units.length)return e.toString();let f=p.roundTo(n,r.precision);for(const s of g(f))f=s,a+=1;const c=(o=r.units[a])!==null&&o!==void 0?o:"",w=r.lowercase?c.toLowerCase():c,b=r.space?" ":"",v=f.toString().replace(d.defaultOptions.decimalSeparator,r.decimalSeparator);return`${O}${v}${b}${w}`}u.millify=_;var N=u.default=_;export{N as _};
